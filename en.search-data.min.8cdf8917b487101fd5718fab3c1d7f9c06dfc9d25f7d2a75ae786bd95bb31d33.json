[{"id":0,"href":"/post/flow-launcher%E6%8F%92%E4%BB%B6/","title":"flow launcher插件","section":"Posts","content":" Flow Launcher # CI/CD # github/workflows GitHub Actions 入门教程 - 阮一峰的网络日志 https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions 大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。 很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。 如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。\nGitHub Actions 有一些自己的术语。 （1）workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。 （2）job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。 （3）step（步骤）：每个 job 由多个 step 构成，一步步完成。 （4）action （动作）：每个 step 可以依次执行一个或多个命令（action）。\nJSON-RPC # JSON-RPC 是用 JSON 编码的远程过程调用协议。 https://en.wikipedia.org/wiki/JSON-RPC 在 Flow Launcher 中，我们使用 JSON-RPC 作为本地过程调用协议来绑定 Flow 和其他程序语言（Python 插件和 JavaScript/TypeScript 插件）。 因此，我们需要在 Flow 和 Plugin 之间构建一个通用的 API。 JSON-RPC 是一种远程过程调用（RPC）协议，用于在客户端和服务器之间进行通信。在这个上下文中，JSON-RPC 用于在插件和 Flow Launcher 之间进行通信。当用户在 Flow Launcher 中执行某个操作时，比如发起一个查询，Flow Launcher 将会向插件发送一个 JSON-RPC 请求，插件接收请求并返回相应的结果。\n关键在于是Flow Launcher 调用 插件的函数，而插件不能调用客户端的函数\n这在这个上下文中，Flow Launcher 是 JSON-RPC 客户端，而插件是 JSON-RPC 服务器端。 Flow Launcher 作为 JSON-RPC 客户端，负责向插件发送 JSON-RPC 请求，请求执行某些操作，比如执行特定的命令或获取某些信息。 而插件作为 JSON-RPC 服务器端，接收 Flow Launcher 发送过来的 JSON-RPC 请求，然后解析请求，执行相应的操作，并将执行结果封装成 JSON-RPC 响应返回给 Flow Launcher。\nclass JsonRPCRequest(TypedDict): method: str parameters: list settings: NotRequired[dict[Any, Any]] class JsonRPCClient: def send(self, data: Mapping) -\u0026gt; None: json.dump(data, sys.stdout) def recieve(self) -\u0026gt; JsonRPCRequest: try: # 这行代码的意思是将命令行中传入的第一个参数解析为 JSON 格式的字符串， # 然后将其转换为 Python 对象，并将其作为函数的返回值。 return json.loads(sys.argv[1]) except (IndexError, json.JSONDecodeError): return {\u0026#39;method\u0026#39;: \u0026#39;query\u0026#39;, \u0026#39;parameters\u0026#39;: [\u0026#39;\u0026#39;]} # -*- coding: utf-8 -*- import inspect import sys from json import loads, dumps class FlowLauncher: \u0026#34;\u0026#34;\u0026#34; Flow.Launcher python plugin base \u0026#34;\u0026#34;\u0026#34; def __init__(self): # defalut jsonrpc self.rpc_request = {\u0026#39;method\u0026#39;: \u0026#39;query\u0026#39;, \u0026#39;parameters\u0026#39;: [\u0026#39;\u0026#39;]} self.debugMessage = \u0026#34;\u0026#34; if len(sys.argv) \u0026gt; 1: # Gets JSON-RPC from Flow Launcher process. self.rpc_request = loads(sys.argv[1]) # proxy is not working now # self.proxy = self.rpc_request.get(\u0026#34;proxy\u0026#34;, {}) request_method_name = self.rpc_request.get(\u0026#34;method\u0026#34;, \u0026#34;query\u0026#34;) request_parameters = self.rpc_request.get(\u0026#34;parameters\u0026#34;, []) methods = inspect.getmembers(self, predicate=inspect.ismethod) request_method = dict(methods)[request_method_name] results = request_method(*request_parameters) if request_method_name in (\u0026#34;query\u0026#34;, \u0026#34;context_menu\u0026#34;): print(dumps({ \u0026#34;result\u0026#34;: results, \u0026#34;debugMessage\u0026#34;: self.debugMessage })) def query(self, param: str = \u0026#39;\u0026#39;) -\u0026gt; list: \u0026#34;\u0026#34;\u0026#34; sub class need to override this method \u0026#34;\u0026#34;\u0026#34; return [] def context_menu(self, data) -\u0026gt; list: \u0026#34;\u0026#34;\u0026#34; optional context menu entries for a result \u0026#34;\u0026#34;\u0026#34; return [] def debug(self, msg: str): \u0026#34;\u0026#34;\u0026#34; alert msg \u0026#34;\u0026#34;\u0026#34; self.debugMessage = msg JSON RPC 格式 # { \u0026#34;method\u0026#34;: \u0026#34;Flow Launcher API Name\u0026#34;, \u0026#34;parameters\u0026#34;: [] } Flow.Launcher.ChangeQuery # query字符串 requery、布尔 { \u0026#34;method\u0026#34;: \u0026#34;Flow.Launcher.ChangeQuery\u0026#34;, \u0026#34;parameters\u0026#34;: [query, requery] } Flow.Launcher.ShellRun # cmd字符串 { \u0026#34;method\u0026#34;: \u0026#34;Flow.Launcher.ShellRun\u0026#34;, \u0026#34;parameters\u0026#34;: [cmd] } Flow.Launcher.ShowMsg # title字符串 sub_title字符串 ico_path、字符串（路径） { \u0026#34;method\u0026#34;: \u0026#34;Flow.Launcher.ShowMsg\u0026#34;, \u0026#34;parameters\u0026#34;: [title, sub_title, ico_path] } Flow 启动器 API # API 列表：提供了一系列的 API 接口，用于与 Flow Launcher 进行交互。 API 功能： Flow.Launcher.ChangeQuery：更改启动器的查询字符串。 Flow.Launcher.RestartApp：重新启动 Flow Launcher。 Flow.Launcher.SaveAppAllSettings：保存所有 Flow Launcher 的设置。 Flow.Launcher.CheckForNewUpdate：检查 Flow Launcher 的更新。 Flow.Launcher.ShellRun：执行 shell 命令。 Flow.Launcher.CloseApp：关闭 Flow Launcher。 Flow.Launcher.HideApp：隐藏 Flow Launcher。 Flow.Launcher.ShowApp：显示 Flow Launcher。 Flow.Launcher.ShowMsg：显示一个消息框。 Flow.Launcher.GetTranslation：获取当前语言的翻译。 Flow.Launcher.OpenSettingDialog：打开设置对话框。 Flow.Launcher.GetAllPlugins：获取所有已加载的插件。 Flow.Launcher.StartLoadingBar：开始加载动画。 Flow.Launcher.StopLoadingBar：停止加载动画。 Flow.Launcher.ReloadAllPluginData：重新加载所有插件数据。 这段代码定义了一个名为 FlowLauncher 的基类，用于创建 Flow Launcher 插件。插件开发者需要继承这个基类，并实现其中的 query 和 context_menu 方法来定义插件的行为。\nFlow Launcher类 # __init__ 方法：初始化方法，在创建 FlowLauncher 类的实例时被调用。它首先设置了默认的 JSON-RPC 请求，然后检查是否有命令行参数传入，如果有，则将其解析为 JSON-RPC 请求。 query 方法：这是一个需要子类实现的方法。它接收一个字符串参数 param，并返回一个列表作为查询结果。插件开发者需要根据传入的参数进行相应的查询操作，并返回查询结果。 context_menu 方法：这是一个可选的方法，用于定义查询结果的上下文菜单。它接收一个参数 data，并返回一个列表作为上下文菜单的条目。如果插件开发者希望为查询结果添加一些额外的操作选项，可以实现这个方法。 debug 方法：用于输出调试信息。它接收一个字符串参数 msg，并将其保存在 debugMessage 属性中，以便在响应中返回调试信息。 插件开发者只需要继承 FlowLauncher 类，并在子类中实现 query 和 context_menu 方法来定义自己的插件行为。然后，他们可以将这个子类作为他们自己的插件，并将其与 Flow Launcher 集成。\n读取配置settings # wifi快捷登录插件 # 目的为了减少鼠标操作直接弹出浏览器登录页面\nhttps://p.njupt.edu.cn/a79.htm?wlanuserip=10.136.160.206\u0026amp;wlanacip=10.255.253.118\u0026amp;wlanacname=SPL-BRAS-SR8806-X ToDo1 # 支持学校账号、电信账号和移动账号。 提供登录失败的警告。 提示用户在设置中添加账号和密码。 添加测试功能。 实现打包功能，避免客户端需要安装 Python。 南邮校园网认证原理 # portal原理 https://support.huawei.com/enterprise/zh/doc/EDOC1100126895/609549d8\n如何设置电脑的DNS服务器以及常用的DNS服务器 HTTP Referer 教程 - 阮一峰的网络日志 什么是DHCP？为什么要用DHCP？ - 华为\n与DHCP服务器交互，获取局域网地址 我向学校的接入设备发送HTTP连接请求。接入设备将我重定向至\u0026quot;http://10.10.244.11/\"，即定位到\"https://p.njupt.edu.cn/\"。 所以p.njupt.edu.cn应该就是Portal服务器域名，向p.njupt.edu.cn发送GET请求，返回认证页面。 与Portal服务器交互，发送认证请求，通知客户端向接入设备发送认证请求，然后向接入设备发送认证请求 介入设备和RADIUS服务器交互，进行计费操作。 最终返回Portal认证结果，例如 dr1003({\u0026ldquo;result\u0026rdquo;:1,\u0026ldquo;msg\u0026rdquo;:\u0026ldquo;Portal协议认证成功！\u0026rdquo;});\n解决DHCP固定ip问题 # 无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : MediaTek Wi-Fi 6 MT7921 Wireless LAN Card 物理地址. . . . . . . . . . . . . : F8-89-D2-7C-BE-8F DHCP 已启用 . . . . . . . . . . . : 是 自动配置已启用. . . . . . . . . . : 是 本地链接 IPv6 地址. . . . . . . . : fe80::7854:268d:12c6:e8ed%23(首选) IPv4 地址 . . . . . . . . . . . . : 10.136.198.133(首选) 子网掩码 . . . . . . . . . . . . : 255.255.128.0 获得租约的时间 . . . . . . . . . : 2024年5月21日 17:22:21 租约过期的时间 . . . . . . . . . : 2024年5月21日 18:03:36 默认网关. . . . . . . . . . . . . : 10.136.255.254 DHCP 服务器 . . . . . . . . . . . : 10.136.255.254 DHCPv6 IAID . . . . . . . . . . . : 217614802 DHCPv6 客户端 DUID . . . . . . . : 00-01-00-01-29-93-C8-A3-90-2E-16-6A-AA-56 DNS 服务器 . . . . . . . . . . . : 10.10.240.10 10.10.240.8 TCPIP 上的 NetBIOS . . . . . . . : 已启用 请问校园网内电脑可以设置静态IP地址吗？该如何设置？ - 知乎\n现在的网络设备都有防地址私设特性，就是专门为了防止有人将自己网卡设置为静态IP地址的。这种功能的原理就是利用你的电脑是否会发出DHCP报文（自动获取地址就是通过DHCP实现的），交换机会监听DHCP报文，并记录你电脑申请到的IP地址，并进行IP+网卡MAC的绑定。只有这个IP的这个MAC的才允许通信。 你现在把网卡改为固定IP地址，就不会发出DHCP报文，那交换机就监听不到，就不会进行绑定。所以会认为你发出的报文是非法报文，当然就无法通信了。 这个防地址私设特性，是为了防止有人用固定IP地址，和其他人的动态IP地址产生冲突，出现问题，到时候查问题就很难查了。 所以建议你还是乖乖的用动态IP地址吧，不要给网管人员添麻烦，如果有啥特殊需求，找网管沟通下，给你专门分配一个静态IP地址。 天津大学固定ip是收费的，50/年，校园网固定IP 我校校园网采用动态IP地址分配策略，当设备连接到校园网时，会获得一个动态分配的IP地址。 在某些使用场景下，您可能需要使用一个固定的校园网IP地址，例如网络共享打印机、大型仪器设备、专用网络终端等。 信网中心可以根据您的需求，为您分配固定的校园网IP地址。 南邮信息化文档 https://xxb.njupt.edu.cn/_upload/article/files/eb/d5/aeb437a84d66a533135961fa8849/e9c3b23e-4a0a-434c-989b-65ff2009ef8a.pdf\n接口 # portal服务器：p.njupt.edu.cn:80 接入设备：p.njupt.edu.cn:802\nloadConfig\n/eportal/portal/page/loadConfig?callback=dr1001\u0026amp;program_index=\u0026amp;wlan_vlan_id=0\u0026amp;wlan_user_ip=MTAuMTM2LjE2MC4yMDY%3D\u0026amp;wlan_user_ipv6=\u0026amp;wlan_user_ssid=\u0026amp;wlan_user_areaid=\u0026amp;wlan_ac_ip=\u0026amp;wlan_ap_mac=000000000000\u0026amp;gw_id=000000000000\u0026amp;jsVersion=4.X\u0026amp;v=10414\u0026amp;lang=zh\nonline_list\n/eportal/portal/online_list?callback=dr1002\u0026amp;user_account=\u0026amp;user_password=\u0026amp;wlan_user_mac=000000000000\u0026amp;wlan_user_ip=176726222\u0026amp;curr_user_ip=176726222\u0026amp;jsVersion=4.X\u0026amp;v=4182\u0026amp;lang=zh\nlogin\n/eportal/portal/login?callback=dr1003\u0026amp;login_method=1\u0026amp;user_account=%2C0%2CB21090519%40njxy\u0026amp;user_password=Xwj20021114.\u0026amp;wlan_user_ip=10.136.198.133\u0026amp;wlan_user_ipv6=\u0026amp;wlan_user_mac=000000000000\u0026amp;wlan_ac_ip=\u0026amp;wlan_ac_name=\u0026amp;jsVersion=4.1.3\u0026amp;terminal_type=1\u0026amp;lang=zh-cn\u0026amp;v=4028\u0026amp;lang=zh\nlogout\n/eportal/portal/logout?callback=dr1003\u0026amp;login_method=1\u0026amp;user_account=drcom\u0026amp;user_password=123\u0026amp;ac_logout=1\u0026amp;register_mode=1\u0026amp;wlan_user_ip=10.136.160.206\u0026amp;wlan_user_ipv6=\u0026amp;wlan_vlan_id=0\u0026amp;wlan_user_mac=000000000000\u0026amp;wlan_ac_ip=\u0026amp;wlan_ac_name=\u0026amp;jsVersion=4.1.3\u0026amp;v=7267\u0026amp;lang=zh\nimport requests def login(): account = \u0026#39;B21090519@njxy\u0026#39; password = \u0026#39;Xwj20021114.\u0026#39; url = \u0026#39;https://p.njupt.edu.cn:802/eportal/portal/login\u0026#39; params = { \u0026#39;callback\u0026#39;: \u0026#39;dr1003\u0026#39;, \u0026#39;login_method\u0026#39;: \u0026#39;1\u0026#39;, # \u0026#39;user_account\u0026#39;: \u0026#39;,0,B21090519@njxy\u0026#39;, \u0026#39;user_account\u0026#39;: account, \u0026#39;user_password\u0026#39;: password, \u0026#39;wlan_user_ip\u0026#39;: \u0026#39;10.136.160.206\u0026#39;, \u0026#39;wlan_user_ipv6\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;wlan_user_mac\u0026#39;: \u0026#39;000000000000\u0026#39;, \u0026#39;wlan_ac_ip\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;wlan_ac_name\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;jsVersion\u0026#39;: \u0026#39;4.1.3\u0026#39;, \u0026#39;terminal_type\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;lang\u0026#39;: \u0026#39;zh-cn\u0026#39;, \u0026#39;v\u0026#39;: \u0026#39;4028\u0026#39;, \u0026#39;lang\u0026#39;: \u0026#39;zh\u0026#39; } headers = { \u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0\u0026#39; } response = requests.get(url, params=params, headers=headers) print(response.status_code) print(response.text) # 如果需要查看返回的内容 def logout(): url = \u0026#39;https://p.njupt.edu.cn:802/eportal/portal/logout\u0026#39; params = { \u0026#39;callback\u0026#39;: \u0026#39;dr1003\u0026#39;, \u0026#39;login_method\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;user_account\u0026#39;: \u0026#39;drcom\u0026#39;, \u0026#39;user_password\u0026#39;: \u0026#39;123\u0026#39;, \u0026#39;ac_logout\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;register_mode\u0026#39;: \u0026#39;1\u0026#39;, \u0026#39;wlan_user_ip\u0026#39;: \u0026#39;10.136.160.206\u0026#39;, \u0026#39;wlan_user_ipv6\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;wlan_vlan_id\u0026#39;: \u0026#39;0\u0026#39;, \u0026#39;wlan_user_mac\u0026#39;: \u0026#39;000000000000\u0026#39;, \u0026#39;wlan_ac_ip\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;wlan_ac_name\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;jsVersion\u0026#39;: \u0026#39;4.1.3\u0026#39;, \u0026#39;v\u0026#39;: \u0026#39;7267\u0026#39;, \u0026#39;lang\u0026#39;: \u0026#39;zh\u0026#39; } headers = { \u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate, br, zstd\u0026#39;, \u0026#39;Accept-Language\u0026#39;: \u0026#39;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5,en-IE;q=0.4\u0026#39;, \u0026#39;Cookie\u0026#39;: \u0026#39;_ga=GA1.1.148507178.1701333449; _ga_J6LT8812GZ=GS1.1.1701333448.1.1.1701334038.0.0.0\u0026#39;, \u0026#39;Referer\u0026#39;: \u0026#39;https://p.njupt.edu.cn/\u0026#39;, \u0026#39;Sec-Fetch-Dest\u0026#39;: \u0026#39;script\u0026#39;, \u0026#39;Sec-Fetch-Mode\u0026#39;: \u0026#39;no-cors\u0026#39;, \u0026#39;Sec-Fetch-Site\u0026#39;: \u0026#39;same-site\u0026#39;, \u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0\u0026#39; # 其他可能需要的 header } response = requests.get(url, params=params, headers=headers) print(response.status_code) print(response.text) # 如果需要查看返回的内容 if __name__ == \u0026#34;__main__\u0026#34;: # logout() login() 使用命令行连接wifi # 上面的快捷操作需要获得局域网地址，而DHCP动态分配的局域网地址总是不稳定的，而且获取方法待定，我只能尝试使用命令行连接wifi。\n介绍几个帮助命令，如下，其他的就自己去试试吧\nnetsh /? netsh wlan /? netsh wlan connect /? 查看配置文件 netsh wlan show profile netsh wlan show profile xwj 连接到无限Wifi网络： netsh wlan connect name=PROFILE netsh wlan connect ssid=SSID name=PROFILE 断开网络： netsh wlan disconnect\nnetsh wlan show interfaces 系统上有 1 个接口: 名称 : WLAN 说明 : MediaTek Wi-Fi 6 MT7921 Wireless LAN Card GUID : a5c1eb73-b199-4de2-a942-694217e96631 物理地址 : f8:89:d2:7c:be:8f 界面类型 : 主要 状态 : 已连接 SSID : xwj BSSID : 76:f0:87:de:2a:85 网络类型 : 结构 无线电类型 : 802.11n 身份验证 : WPA2 - 个人 密码 : CCMP 连接模式 : 配置文件 频带 : 2.4 GHz 通道 : 1 接收速率(Mbps) : 144.4 传输速率 (Mbps) : 144.4 信号 : 89% 配置文件 : xwj 承载网络状态 : 不可用 netsh wlan disconnect netsh wlan connect name=\u0026#34;xwj\u0026#34; if ((netsh wlan show interfaces) -match \u0026#34;xwj\u0026#34;) { # 是否连接xwj } # 连接校园网 netsh wlan connect name=\u0026#34;NJUPT-CHINANET\u0026#34; Test-Connection 127.0.0.1 -Count 1 \u0026gt; $null; netsh wlan show interfaces | Select-String \u0026#34;SSID\u0026#34;; SSID : xwj BSSID : 76:f0:87:de:2a:85 @netsh wlan show interfaces | find \u0026#34;car-test\u0026#34; \u0026gt; nul \u0026amp;\u0026amp; (netsh wlan disconnect \u0026amp; netsh wlan connect car ) || (netsh wlan disconnect \u0026amp; netsh wlan connect car-test )↳ @ping 127.1 \u0026gt; nul \u0026amp; netsh wlan show interfaces | find \u0026#34;SSID\u0026#34; \u0026amp; pause vscode快捷打开插件 # 实现目标vscode打开everything的目录\nD:\\VSCode\\bin\\code D:\\VSCode\\bin\\code C:\\Users\\xuwenjie\\Desktop\\WorkPlace\\Algorithm\\Algorithm D:\\VSCode\\bin\\code D:\\Project\\PythonProject\\alicebot 大致命令为vscode Algorithm\nToDo2 # 多ide 读取flow客户端配置 设置缓存 打包，无感使用 测试 query 带参数，搜索匹配缓存或者内存中的name\n项目编写 # 代码思路 # 插件用于获取用户在Visual Studio Code中打开过的项目列表。 步骤：\n首先检查用户是否启用了Visual Studio Code的下拉框，未启用则返回空数组。这个是由于参考插件为多功能打开选项，所以需要看vscode是否被选择 然后读取Visual Studio Code的缓存数据，如果缓存存在则直接返回缓存数据。$HOME/Library/Application Support/Code/User/globalStorage/storage.json 若缓存不存在，则读取本地存储中的数据，并将数据转换为项目列表格式后返回。 同时将转换后的项目列表缓存起来。 pulgin settings # body: - type: textBlock attributes: description: Welcome to the settings page for my plugin. Here you can configure the plugin to your liking. - type: input attributes: name: userName label: How should I call you? defaultValue: the user - type: textarea attributes: name: prependResult label: Text to prepend to result output description: \u0026gt; This text will be added to the beginning of the result output. For example, if you set this to \u0026#34;The result is: \u0026#34;, and the result is \u0026#34;42\u0026#34;, the output will be \u0026#34;The result is: 42\u0026#34;. - type: dropdown attributes: name: programmingLanguage label: Programming language to prefer for answers defaultValue: TypeScript options: - JavaScript - TypeScript - Python - \u0026#34;C#\u0026#34; - type: checkbox attributes: name: preferShorterAnswers label: Prefer shorter answers description: If checked, the plugin will try to give answer much shorter than the usual ones. defaultValue: false 官方提供了免费的setting template.yaml生成器 Flow Launcher - Documentation\n插件测试 # 成功构建插件后，可以通过将输出文件移动到 Flow Launcher 的目录中来对其进行本地测试，该目录可通过 Flow Launcher 中的命令访问。FlowLauncher\\Pluginsuserdata另类因此，如果您正在构建 .Net（C# 或 F#）插件，则可以让 IDE 直接将工件构建到该位置（请记住不要在 Git 中检查此构建输出路径）。\n详细步骤\n在 Flow Launcher 中执行userdata 导航到文件夹。Plugins 将与指定相同的现有插件从文件夹中移出（如果多个插件具有相同的插件 ID，则不会加载它们中的任何一个）。Plugin ID plugin.json 将新构建的插件文件夹复制并粘贴到此文件夹中。 执行以重新加载新插件。 Restart Flow Launcher\n提示：.Net 插件（例如 C# 和 F#）每次进行更改时都需要您重新启动流程并构建新的工件以重新加载插件，但 Python 和 JS/TS 插件您可以直接编辑插件。\nhello world # python支持直接编辑插件，将编写的代码复制过去即刻\nvscode storage # 这段代码是一个 JSON 格式的配置文件，其中包含了一些关于用户界面配置和工作区的信息。让我帮你解析一下这些内容：\n\u0026ldquo;telemetry.machineId\u0026rdquo;: \u0026ldquo;4fd368a50cab7edf1f493950ad5427e90b9ac12fca180ac55f52481aaf7b6541\u0026rdquo; - 这是一个用于识别用户设备的 ID。 \u0026ldquo;backupWorkspaces\u0026rdquo;: - 这是关于备份工作区的信息，包括了工作区列表和文件夹列表。 \u0026ldquo;windowControlHeight\u0026rdquo;: 35 - 窗口控制的高度。 \u0026ldquo;theme\u0026rdquo;: \u0026ldquo;vs-dark\u0026rdquo; - 当前使用的主题。 \u0026ldquo;themeBackground\u0026rdquo;: \u0026ldquo;#1f1f1f\u0026rdquo; - 主题的背景颜色。 \u0026ldquo;windowSplash\u0026rdquo;: - 窗口启动时的配置信息，包括了缩放级别、基本主题、颜色信息和布局信息。 \u0026ldquo;windowsState\u0026rdquo;: - 窗口状态信息，包括了最后一个活动窗口和已打开窗口的列表，每个窗口包括了文件夹路径、备份路径和界面状态。 \u0026ldquo;userDataProfilesMigration\u0026rdquo;: true - 是否启用用户数据配置文件的迁移。 \u0026ldquo;profileAssociations\u0026rdquo;: - 配置文件关联信息，包括了工作空间和默认配置文件之间的映射关系。 这些是该 JSON 文件中的主要字段和内容。\n[\u0026ldquo;lastKnownMenubarData\u0026rdquo;]被从storage中删除了 https://github.com/microsoft/vscode/issues/138491\nvscode将不支持工作空间的长期存储，只支持临时存储，关机消失 可以使用缓存将信息保存在flow launcher中，长期不访问就会消失\n\u0026#34;backupWorkspaces\u0026#34;: { \u0026#34;workspaces\u0026#34;: [], \u0026#34;folders\u0026#34;: [ { \u0026#34;folderUri\u0026#34;: \u0026#34;file:///d%3A/Project/PythonProject/Flow.Launcher.Plugin.VscodeOpen\u0026#34; }, { \u0026#34;folderUri\u0026#34;: \u0026#34;file:///d%3A/Project/TypescriptProject/open-history-item\u0026#34; }, { \u0026#34;folderUri\u0026#34;: \u0026#34;file:///c%3A/Users/xuwenjie/AppData/Local/FlowLauncher/app-1.18.0/UserData/Plugins/Hello%20World%20Python-1.0.0\u0026#34; }, { \u0026#34;folderUri\u0026#34;: \u0026#34;file:///c%3A/Users/xuwenjie/AppData/Local/FlowLauncher/app-1.18.0/UserData/Plugins/VscodeOpen\u0026#34; } ], \u0026#34;emptyWindows\u0026#34;: [] }, "},{"id":1,"href":"/post/%E5%BC%80%E5%90%AF%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/","title":"开启个人博客之旅","section":"Posts","content":"dd Hello World!\n"}]